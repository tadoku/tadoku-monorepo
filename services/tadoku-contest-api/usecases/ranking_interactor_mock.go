// Code generated by MockGen. DO NOT EDIT.
// Source: ranking_interactor.go

// Package usecases is a generated GoMock package.
package usecases

import (
	gomock "github.com/golang/mock/gomock"
	domain "github.com/tadoku/api/domain"
	reflect "reflect"
)

// MockRankingInteractor is a mock of RankingInteractor interface
type MockRankingInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockRankingInteractorMockRecorder
}

// MockRankingInteractorMockRecorder is the mock recorder for MockRankingInteractor
type MockRankingInteractorMockRecorder struct {
	mock *MockRankingInteractor
}

// NewMockRankingInteractor creates a new mock instance
func NewMockRankingInteractor(ctrl *gomock.Controller) *MockRankingInteractor {
	mock := &MockRankingInteractor{ctrl: ctrl}
	mock.recorder = &MockRankingInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRankingInteractor) EXPECT() *MockRankingInteractorMockRecorder {
	return m.recorder
}

// CreateRanking mocks base method
func (m *MockRankingInteractor) CreateRanking(contestID, userID uint64, languages domain.LanguageCodes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRanking", contestID, userID, languages)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRanking indicates an expected call of CreateRanking
func (mr *MockRankingInteractorMockRecorder) CreateRanking(contestID, userID, languages interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRanking", reflect.TypeOf((*MockRankingInteractor)(nil).CreateRanking), contestID, userID, languages)
}

// CreateLog mocks base method
func (m *MockRankingInteractor) CreateLog(log domain.ContestLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLog", log)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLog indicates an expected call of CreateLog
func (mr *MockRankingInteractorMockRecorder) CreateLog(log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLog", reflect.TypeOf((*MockRankingInteractor)(nil).CreateLog), log)
}

// UpdateRanking mocks base method
func (m *MockRankingInteractor) UpdateRanking(contestID, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRanking", contestID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRanking indicates an expected call of UpdateRanking
func (mr *MockRankingInteractorMockRecorder) UpdateRanking(contestID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRanking", reflect.TypeOf((*MockRankingInteractor)(nil).UpdateRanking), contestID, userID)
}

// RankingsForContest mocks base method
func (m *MockRankingInteractor) RankingsForContest(contestID uint64, languageCode domain.LanguageCode) (domain.Rankings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RankingsForContest", contestID, languageCode)
	ret0, _ := ret[0].(domain.Rankings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RankingsForContest indicates an expected call of RankingsForContest
func (mr *MockRankingInteractorMockRecorder) RankingsForContest(contestID, languageCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RankingsForContest", reflect.TypeOf((*MockRankingInteractor)(nil).RankingsForContest), contestID, languageCode)
}
