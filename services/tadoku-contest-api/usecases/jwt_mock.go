// Code generated by MockGen. DO NOT EDIT.
// Source: jwt.go

// Package usecases is a generated GoMock package.
package usecases

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockJWTGenerator is a mock of JWTGenerator interface
type MockJWTGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockJWTGeneratorMockRecorder
}

// MockJWTGeneratorMockRecorder is the mock recorder for MockJWTGenerator
type MockJWTGeneratorMockRecorder struct {
	mock *MockJWTGenerator
}

// NewMockJWTGenerator creates a new mock instance
func NewMockJWTGenerator(ctrl *gomock.Controller) *MockJWTGenerator {
	mock := &MockJWTGenerator{ctrl: ctrl}
	mock.recorder = &MockJWTGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockJWTGenerator) EXPECT() *MockJWTGeneratorMockRecorder {
	return m.recorder
}

// New mocks base method
func (m *MockJWTGenerator) New(expiresIn time.Duration, claims ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{expiresIn}
	for _, a := range claims {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "New", varargs...)
}

// New indicates an expected call of New
func (mr *MockJWTGeneratorMockRecorder) New(expiresIn interface{}, claims ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{expiresIn}, claims...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockJWTGenerator)(nil).New), varargs...)
}
